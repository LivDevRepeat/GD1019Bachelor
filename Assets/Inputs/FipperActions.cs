//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Inputs/FipperActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FipperActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FipperActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FipperActions"",
    ""maps"": [
        {
            ""name"": ""Flipper"",
            ""id"": ""870ebc11-77ab-41d6-9262-3b5f74943a7d"",
            ""actions"": [
                {
                    ""name"": "" Flipper Raise Left"",
                    ""type"": ""Value"",
                    ""id"": ""b24a7d12-4d45-4523-b230-123c19d78035"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": "" Flipper Raise Right"",
                    ""type"": ""Value"",
                    ""id"": ""2726665e-a1ae-40f7-bcfa-e9925f14b7b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Flipper Lower Left"",
                    ""type"": ""Button"",
                    ""id"": ""7d565c08-b295-4307-a77b-b7be39556410"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flipper Lower Right"",
                    ""type"": ""Button"",
                    ""id"": ""3738a909-1c51-4af9-8a05-1daff5385273"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""615cfe51-1f0d-4bdf-bf92-852ad47108eb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Flipper Raise Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f62c1118-c812-48c5-86ed-62c1ec5561dd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flipper Lower Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1ab9162-183a-4d78-abad-08a901af2986"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" Flipper Raise Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20d8e0d8-731d-4965-bfc7-5f9c5691c693"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flipper Lower Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""3be6d81c-e34c-4f71-b7b5-05b903aad7fc"",
            ""actions"": [
                {
                    ""name"": ""Debug Load New Scene"",
                    ""type"": ""Button"",
                    ""id"": ""b0d58dba-37b7-4062-bd2d-09d3664f607d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""482dd70d-be30-436a-a182-3d192775a242"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug Load New Scene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Flipper
        m_Flipper = asset.FindActionMap("Flipper", throwIfNotFound: true);
        m_Flipper_FlipperRaiseLeft = m_Flipper.FindAction(" Flipper Raise Left", throwIfNotFound: true);
        m_Flipper_FlipperRaiseRight = m_Flipper.FindAction(" Flipper Raise Right", throwIfNotFound: true);
        m_Flipper_FlipperLowerLeft = m_Flipper.FindAction("Flipper Lower Left", throwIfNotFound: true);
        m_Flipper_FlipperLowerRight = m_Flipper.FindAction("Flipper Lower Right", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_DebugLoadNewScene = m_Debug.FindAction("Debug Load New Scene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Flipper
    private readonly InputActionMap m_Flipper;
    private List<IFlipperActions> m_FlipperActionsCallbackInterfaces = new List<IFlipperActions>();
    private readonly InputAction m_Flipper_FlipperRaiseLeft;
    private readonly InputAction m_Flipper_FlipperRaiseRight;
    private readonly InputAction m_Flipper_FlipperLowerLeft;
    private readonly InputAction m_Flipper_FlipperLowerRight;
    public struct FlipperActions
    {
        private @FipperActions m_Wrapper;
        public FlipperActions(@FipperActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FlipperRaiseLeft => m_Wrapper.m_Flipper_FlipperRaiseLeft;
        public InputAction @FlipperRaiseRight => m_Wrapper.m_Flipper_FlipperRaiseRight;
        public InputAction @FlipperLowerLeft => m_Wrapper.m_Flipper_FlipperLowerLeft;
        public InputAction @FlipperLowerRight => m_Wrapper.m_Flipper_FlipperLowerRight;
        public InputActionMap Get() { return m_Wrapper.m_Flipper; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlipperActions set) { return set.Get(); }
        public void AddCallbacks(IFlipperActions instance)
        {
            if (instance == null || m_Wrapper.m_FlipperActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlipperActionsCallbackInterfaces.Add(instance);
            @FlipperRaiseLeft.started += instance.OnFlipperRaiseLeft;
            @FlipperRaiseLeft.performed += instance.OnFlipperRaiseLeft;
            @FlipperRaiseLeft.canceled += instance.OnFlipperRaiseLeft;
            @FlipperRaiseRight.started += instance.OnFlipperRaiseRight;
            @FlipperRaiseRight.performed += instance.OnFlipperRaiseRight;
            @FlipperRaiseRight.canceled += instance.OnFlipperRaiseRight;
            @FlipperLowerLeft.started += instance.OnFlipperLowerLeft;
            @FlipperLowerLeft.performed += instance.OnFlipperLowerLeft;
            @FlipperLowerLeft.canceled += instance.OnFlipperLowerLeft;
            @FlipperLowerRight.started += instance.OnFlipperLowerRight;
            @FlipperLowerRight.performed += instance.OnFlipperLowerRight;
            @FlipperLowerRight.canceled += instance.OnFlipperLowerRight;
        }

        private void UnregisterCallbacks(IFlipperActions instance)
        {
            @FlipperRaiseLeft.started -= instance.OnFlipperRaiseLeft;
            @FlipperRaiseLeft.performed -= instance.OnFlipperRaiseLeft;
            @FlipperRaiseLeft.canceled -= instance.OnFlipperRaiseLeft;
            @FlipperRaiseRight.started -= instance.OnFlipperRaiseRight;
            @FlipperRaiseRight.performed -= instance.OnFlipperRaiseRight;
            @FlipperRaiseRight.canceled -= instance.OnFlipperRaiseRight;
            @FlipperLowerLeft.started -= instance.OnFlipperLowerLeft;
            @FlipperLowerLeft.performed -= instance.OnFlipperLowerLeft;
            @FlipperLowerLeft.canceled -= instance.OnFlipperLowerLeft;
            @FlipperLowerRight.started -= instance.OnFlipperLowerRight;
            @FlipperLowerRight.performed -= instance.OnFlipperLowerRight;
            @FlipperLowerRight.canceled -= instance.OnFlipperLowerRight;
        }

        public void RemoveCallbacks(IFlipperActions instance)
        {
            if (m_Wrapper.m_FlipperActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlipperActions instance)
        {
            foreach (var item in m_Wrapper.m_FlipperActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlipperActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlipperActions @Flipper => new FlipperActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_DebugLoadNewScene;
    public struct DebugActions
    {
        private @FipperActions m_Wrapper;
        public DebugActions(@FipperActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DebugLoadNewScene => m_Wrapper.m_Debug_DebugLoadNewScene;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @DebugLoadNewScene.started += instance.OnDebugLoadNewScene;
            @DebugLoadNewScene.performed += instance.OnDebugLoadNewScene;
            @DebugLoadNewScene.canceled += instance.OnDebugLoadNewScene;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @DebugLoadNewScene.started -= instance.OnDebugLoadNewScene;
            @DebugLoadNewScene.performed -= instance.OnDebugLoadNewScene;
            @DebugLoadNewScene.canceled -= instance.OnDebugLoadNewScene;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IFlipperActions
    {
        void OnFlipperRaiseLeft(InputAction.CallbackContext context);
        void OnFlipperRaiseRight(InputAction.CallbackContext context);
        void OnFlipperLowerLeft(InputAction.CallbackContext context);
        void OnFlipperLowerRight(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnDebugLoadNewScene(InputAction.CallbackContext context);
    }
}
